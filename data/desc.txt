Modal FRP for all: Functional reactive programming without space leaks in Haskell
BAHR, PATRICK. “Modal FRP for All: Functional Reactive Programming without Space Leaks in Haskell.” Journal of Functional Programming, vol. 32, 2022. Crossref, https://doi.org/10.1017/s0956796822000132.
Abstract Functional reactive programming (FRP) provides a high-level interface for implementing reactive systems in a declarative manner. However, this high-level interface has to be carefully reigned in to ensure that programs can in fact be executed in practice. Specifically, one must ensure that FRP programs are causal and can be implemented without introducing space leaks. In recent years, modal types have been demonstrated to be an effective tool to ensure these operational properties. In this paper, we present combines the benefits enjoyed by FRP libraries such as Yampa, namely access to a rich library ecosystem (e.g., for graphics programming), with the strong operational guarantees offered by a bespoke type system. To establish the productivity, causality, and memory properties of the language, we prove type soundness using a logical relations argument fully mechanised in the Coq proof assistant.